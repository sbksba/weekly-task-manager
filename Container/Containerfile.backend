# Stage 1: Build the Rust application
# Uses a stable Rust image for compilation
FROM rust:1.88-slim-bookworm AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy the entire project context (including 'server' and 'common' crates)
# The '.' indicates that the build context (which will be the root of your project)
# is copied to /app in the container.
COPY . .

# Change the working directory to the server directory for compilation
WORKDIR /app/server

# Build the binary in release mode for optimized performance and smaller size
RUN cargo build --release

# Stage 2: Create the final lightweight image
# Uses a lightweight Debian image for runtime
FROM debian:bookworm-slim

# Set the working directory inside the container
WORKDIR /app

# Create the 'database' directory where 'sqlite.db' and 'client_colors.json' will be stored.
# This is crucial for the persistent volume mount.
RUN mkdir -p /app/database

# Copy the compiled binary from the builder stage
# The 'server' binary will be located at /app/target/release/server in the 'builder' stage.
COPY --from=builder /app/target/release/server ./server

# Expose the port your Rust application listens on (default 3000)
EXPOSE 3000

# Command to execute when the container starts
# Runs the server binary
CMD ["./server"]
